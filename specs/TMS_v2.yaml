swagger: '2.0'
info:
  description: |
    The Cloud Transport Management API offers operations for the export/upload, and import of files to Cloud Transport Management, as well as for logging/monitoring. In case of a physical file transport, the 'File Upload' is always the first operation, followed by 'Node Export' or 'Node Upload'. It is also possible to perform a transport based on a reference, where a 'File Upload' is not needed. Use 'Node Export', if you want to enable the transport of content directly in your application. The previously uploaded file or a specified reference is attached to a new transport request which is added to the import queues of the follow-on transport nodes of the export node. Use 'Node Upload' in continuous integration scenarios, for example, where you have an external content or application archive (MTA, for example) that you want to upload in the first transport node of your transport landscape. You can also use 'Node Upload' to upload content or applications to a specific subaccount that is not part of your standard transport landscape, for example, a training subaccount. In addition, the Cloud Transport Management API offers operations for importing, forwarding and resetting one or many specified transport requests as well as an operation for importing all transport requests of a node. Each of these operations produces a transport action which you can retrieve using the 'Get transport action' operation. The 'Get transport requests' operation is available for imports to get transport requests of a specified node. Typically, an import is an asynchronous operation, which you should monitor by retrieving the import action while the action status is 'running'. Use the 'Get transport logs' operation to get the logs of a transport action, and the 'Get transport request logs' operation to get transport request-specific logs. Use the Cloud Transport Management Versioning API to ensure that the version of this API is supported by Cloud Transport Management.
  title: Cloud Transport Management
  version: 2.2.1
x-sap-shortText: Transport development artifacts and application-specific content.
host: hostname
basePath: /v2
securityDefinitions:
  OAuth2:
    type: oauth2
    description: "To use this API, you must get OAuth client credentials (client ID and client secret) from SAP BTP by using the cockpit or the URL  https://<tenant_name>.authentication.<region>.hana.ondemand.com/oauth/token?grant_type=client_credentials. You must then input the the client credentials to the SAP BTP token  endpoint to obtain an access token. \n"
    flow: application
    tokenUrl: https://{subdomain}.authentication.{region}.hana.ondemand.com/oauth/token
    scopes: {}
security:
- OAuth2: []
x-servers:
- url: https://transport-service-app-backend.ts.cfapps.{region}.hana.ondemand.com/v2
  description: Cloud Transport Management Production URL
  templates:
    region:
      description: The SAP BTP region (domain) where the application is deployed
      enum:
      - ap10
      - ap11
      - ap12
      - ap20
      - ap21
      - br10
      - ca10
      - ch20
      - eu10
      - eu11
      - eu20
      - eu21
      - eu30
      - in30
      - jp10
      - jp20
      - us10
      - us20
      - us21
      - us30
      - us31
      default: eu10
    subdomain:
      description: Tenant subdomain. The subdomain can be seen on SAP BTP Cockpit as part of Subaccount Details
schemes:
- https
paths:
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        required: true
        type: file
        description: File with application content
      - name: namedUser
        in: formData
        required: false
        type: string
        maxLength: 60
        description: User displayed in Cloud Transport Management UI. If not given, the authentication user will be shown in Cloud Transport Management UI.
      responses:
        '201':
          description: A new file was created
          examples:
            fileId: 573
            fileName: example.mtar
          schema:
            $ref: '#/definitions/FileInfo'
        '400':
          description: Request could not be processed (Bad Request)
          schema:
            $ref: '#/definitions/ExceptionObject'
        '401':
          description: Unauthorized to trigger this action
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/ExceptionObject'
        '500':
          description: Request could not be processed (Internal Server Error)
          schema:
            $ref: '#/definitions/ExceptionObject'
      tags:
      - Files
      description: |
        Uploads a file (application or content archive) to Cloud Transport Management and returns a file ID. You can reference the file ID in Node Export and Node Upload requests.
      operationId: FILE_UPLOAD_V2
      summary: File Upload
  /files/{fileId}:
    delete:
      produces:
      - application/json
      parameters:
      - description: File ID as returned by POST /files/upload
        in: path
        name: fileId
        required: true
        type: integer
        format: int64
      responses:
        '204':
          description: Successfully deleted
        '401':
          description: Unauthorized to trigger this action
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: The file {fileId} does not exist (Not Found)
          schema:
            $ref: '#/definitions/ExceptionObject'
        '500':
          description: Request could not be processed (Internal Server Error)
          schema:
            $ref: '#/definitions/ExceptionObject'
      tags:
      - Files
      description: Deletes a file (application or content archive) that was uploaded to Cloud Transport Management but is not related to a Transport Request.
      summary: File Deletion
      operationId: FILE_DELETE
  /nodes/export:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        description: Request body
        schema:
          $ref: '#/definitions/NodeExportBodyEntityName'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/ExportEntity'
        '400':
          description: Request could not be processed (Bad Request)
          schema:
            $ref: '#/definitions/ExceptionObject'
        '401':
          description: Unauthorized to trigger this action
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Node does not exist
          schema:
            $ref: '#/definitions/ExceptionObject'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/ExceptionObject'
        '500':
          description: Request could not be processed (Internal Server Error)
          schema:
            $ref: '#/definitions/ExceptionObject'
      tags:
      - Export & Upload
      description: Creates a transport request containing (multiple) file or application-specific references.  The export node is identified by its name. The transport request is added to the queues of the follow-on nodes of export node.
      operationId: NODE_EXPORT_BY_NAME_V2
      summary: Node Export
  /nodes/upload:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        description: Request body
        schema:
          $ref: '#/definitions/NodeExportBodyEntityName'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/ExportEntity'
        '400':
          description: Request could not be processed (Bad Request)
          schema:
            $ref: '#/definitions/ExceptionObject'
        '401':
          description: Unauthorized to trigger this action
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Node does not exist
          schema:
            $ref: '#/definitions/ExceptionObject'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/ExceptionObject'
        '500':
          description: Request could not be processed (Internal Server Error)
          schema:
            $ref: '#/definitions/ExceptionObject'
      tags:
      - Export & Upload
      description: Creates a transport request with content specified by the File Upload operation or a by an application-specific reference.  The upload node is identified by its name. The transport request is added to the queue of the upload node.
      operationId: NODE_UPLOAD_BY_NAME_V2
      summary: Node Upload
  /nodes/{nodeId}/transportRequests:
    get:
      tags:
      - Import
      summary: Get transport requests
      description: Returns transport requests for a node
      operationId: NODE_TRS_GET_V2
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - name: status
        in: query
        description: |
          Transport request status (one of in,ru,re,su,sk,wa,er,fa,de):
            * `in` - Initial
            * `ru` - Running
            * `re` - Repeatable
            * `su` - Succeeded
            * `sk` - Skipped
            * `wa` - Warning
            * `er` - Error
            * `fa` - Fatal
            * `de` - Deleted
        required: true
        type: string
      - name: createdAtFrom
        in: query
        description: Start date and time of transport request creation. Must have format "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        type: string
        format: date-time
      - name: createdAtTo
        in: query
        description: End date and time of transport request creation. Must have format "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        type: string
        format: date-time
      - name: queuedAtFrom
        in: query
        description: Start date and time of queue entry creation. Must have format "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        type: string
        format: date-time
      - name: queuedAtTo
        in: query
        description: End date and time of queue entry creation. Must have format "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        type: string
        format: date-time
      - name: owner
        in: query
        description: Transport request owner
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransportRequestsResponse2'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /nodes/{nodeId}/transportRequests/import:
    post:
      tags:
      - Import
      summary: Import specified transport requests
      description: |
        Imports transport requests specified in request body. Request body must contain valid for import transport request IDs. If one of the IDs is invalid, the operation will fail
      operationId: NODE_IMPORT_SELECTED_V2
      consumes:
      - application/json;charset=UTF-8
      produces:
      - application/json;charset=UTF-8
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - in: body
        name: entity
        description: Request body
        required: false
        schema:
          $ref: '#/definitions/TransportRequestsBodyEntity2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImportResponse2'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /nodes/{nodeId}/transportRequests/importAll:
    post:
      tags:
      - Import
      summary: Import all transport requests
      description: Import all importable transport requests of a node
      operationId: NODE_IMPORT_ALL_V2
      consumes:
      - application/json;charset=UTF-8
      produces:
      - application/json;charset=UTF-8
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - in: body
        name: entity
        description: Request body
        required: false
        schema:
          $ref: '#/definitions/TransportRequestsBodyEntityImpAll2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImportResponse2'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /nodes/{nodeId}/transportRequests/forward:
    post:
      tags:
      - Import
      summary: Forward transport requests
      description: |
        Forwards transport requests specified in request body. Request body must contain valid for forward transport request IDs. If one of the IDs is invalid, the operation will fail
      operationId: NODE_FORWARD_V2
      consumes:
      - application/json;charset=UTF-8
      produces:
      - application/json
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - in: body
        name: transportRequestsReq
        description: Request Body
        required: false
        schema:
          $ref: '#/definitions/TransportRequestsBodyEntity2'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /nodes/{nodeId}/transportRequests/reset:
    post:
      tags:
      - Import
      summary: Reset transport requests
      description: |
        Resets transport requests specified in request body. Request body must contain valid for reset transport request IDs. If one of the IDs is invalid, the operation will fail
      operationId: NODE_RESET_V2
      consumes:
      - application/json;charset=UTF-8
      produces:
      - application/json
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - in: body
        name: transportRequestsReq
        description: Request Body
        required: false
        schema:
          $ref: '#/definitions/TransportRequestsBodyEntity2'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /nodes/{nodeId}/transportRequests/remove:
    post:
      tags:
      - Import
      summary: Remove transport requests from the import queue of the node
      description: |
        Removes transport requests specified in request body from the import queue of the node. Request body must contain valid for remove transport request IDs. If one of the IDs is invalid, the operation will fail
      operationId: NODE_TRS_REMOVE_V2
      consumes:
      - application/json;charset=UTF-8
      produces:
      - application/json
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - in: body
        name: transportRequestsReq
        description: Request Body
        required: false
        schema:
          $ref: '#/definitions/TransportRequestsBodyEntity2'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /actions/{actionId}:
    get:
      tags:
      - Logging & Monitoring
      summary: Get transport action
      description: |
        Returns properties of an action including transport requests
      operationId: TRANSPORT_ACTION_GET_V2
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: actionId
        in: path
        description: Action ID
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ActionResponse2'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /actions/{actionId}/logs:
    get:
      tags:
      - Logging & Monitoring
      summary: Get transport logs
      description: Returns logs for a transport action
      operationId: TRANSPORT_ACTION_LOGS_GET_V2
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: actionId
        in: path
        description: Action ID
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LogsResponse2'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
  /nodes/{nodeId}/transportRequests/{transportRequestId}/logs:
    get:
      tags:
      - Logging & Monitoring
      summary: Get transport request logs
      description: Returns logs for a transport request
      operationId: getTransportRequestLogsUsingGET
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: nodeId
        in: path
        description: Node ID
        required: true
        type: integer
        format: int64
      - name: transportRequestId
        in: path
        description: Transport Request ID
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TrLogsResponse2'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/TmsExceptionObject'
definitions:
  ContentType:
    description: |
      Content type (one of MTA, XSCDU, APP)
        * `MTA` - Multi-Target Application
        * `XSCDU` - SAP HANA Extended Application Services Classic Model Delivery Unit
        * `APP` - generic application specific content
        * `BTP_ABAP` - SAP BTP, ABAP Environment
    enum:
    - MTA
    - XSCDU
    - APP
    - BTP_ABAP
  ExceptionObject:
    example:
      errorType: TsInternalServerErrorException
      message: The application has encountered an unexpected error.
    properties:
      errorType:
        type: string
      message:
        type: string
  TmsExceptionObject:
    properties:
      errorType:
        type: string
      message:
        type: string
    example:
      message: Node ID 117 does not exist
      errorType: com.sap.lm.sl.alm.ts.core.exception.service.TsNotFoundException
  ExportEntity:
    properties:
      queueEntries:
        items:
          $ref: '#/definitions/ExportQueueEntryInfo'
        type: array
      transportRequestDescription:
        description: Transport request description
        type: string
      transportRequestId:
        type: integer
        format: int64
        description: Transport request ID
    required:
    - transportRequestId
    - transportRequestDescription
    - queueEntries
    example:
      queueEntries:
      - nodeId: 226
        nodeName: PROD
        queueId: 354
      transportRequestDescription: export/upload of 2 MTAs
      transportRequestId: 352
  ExportQueueEntryInfo:
    properties:
      nodeId:
        type: integer
        format: int64
        description: ID of node where content was put in
      nodeName:
        type: string
        description: Name of node where content was put in
      queueId:
        type: integer
        format: int64
    required:
    - nodeId
    - queueId
    - nodeName
  FileInfo:
    properties:
      fileId:
        type: integer
        format: int64
        description: File ID generated by Cloud Transport Management
      fileName:
        type: string
        description: File name
  NodeExportBodyEntityName:
    description: Node export request
    properties:
      description:
        type: string
        maxLength: 512
      entries:
        items:
          $ref: '#/definitions/PostContentRef'
        type: array
      nodeName:
        type: string
        maxLength: 30
      contentType:
        $ref: '#/definitions/ContentType'
      storageType:
        $ref: '#/definitions/StorageType'
      namedUser:
        type: string
        maxLength: 60
        description: User displayed in Cloud Transport Management UI. If not given the authentication user will be shown in Cloud Transport Management UI.
    required:
    - description
    - nodeName
    - contentType
    - storageType
    - entries
    example:
      nodeName: DEV
      contentType: MTA
      storageType: FILE
      entries:
      - uri: '627'
      - uri: '628'
      description: export/upload of 2 MTAs
      namedUser: UserName
  NotAuthorizedException:
    example:
      error: unauthorized
      error_description: Full authentication is required to access this resource
    properties:
      error:
        type: string
      error_description:
        type: string
  PostContentRef:
    properties:
      uri:
        description: Link to content; file ID in case if storage type is FILE;
        type: string
        maxLength: 256
    required:
    - uri
  StorageType:
    description: |
      Storage type (one of FILE, REFERENCE)
        * `FILE` - file
        * `REFERENCE` - content reference
    enum:
    - FILE
    - REFERENCE
  TransportRequestsResponse2:
    properties:
      transportRequests:
        type: array
        items:
          $ref: '#/definitions/TransportRequestResponse2'
        example:
          transportRequests:
          - id: 30
            status: succeeded
            archived: false
            position: 1
            createdAt: '2019-07-25T08:31:10.464Z'
            queuedAt: '2019-07-25T09:10:00.123Z'
            createdBy: d7ad0010-09a7-4916-be8d-1166c653e0c7
            createdByNamedUser: d012345
            description: TR3501
            origin: SRC_NODE_350
            entries:
            - id: 31
              storageType: FILE
              contentType: APP
              uri: '10'
            - id: 32
              storageType: FILE
              contentType: APP
              uri: '15'
          - id: 37
            status: succeeded
            archived: false
            position: 2
            createdAt: '2019-07-25T08:30:10.164Z'
            queuedAt: '2019-07-25T09:00:00.123Z'
            createdBy: d7ad0010-09a7-4916-be8d-1166c653e0c7
            createdByNamedUser: d012345
            description: TR3502
            origin: SRC_NODE_350
            entries:
            - id: 39
              storageType: FILE
              contentType: APP
              uri: '25'
            - id: 38
              storageType: FILE
              contentType: APP
              uri: '20'
  TransportRequestResponse2:
    properties:
      id:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/TRStatus'
      archived:
        type: boolean
      position:
        type: integer
        format: int64
      createdBy:
        type: string
      createdByNamedUser:
        type: string
      createdAt:
        type: string
        format: date-time
      queuedAt:
        type: string
        format: date-time
      description:
        type: string
      origin:
        type: string
      entries:
        type: array
        items:
          $ref: '#/definitions/QueueEntryEntry2'
  QueueEntryEntry2:
    properties:
      id:
        type: integer
        format: int64
      storageType:
        $ref: '#/definitions/StorageType'
      contentType:
        $ref: '#/definitions/ContentType'
      uri:
        type: string
  TransportRequestsBodyEntity2:
    properties:
      namedUser:
        type: string
        maxLength: 60
      transportRequests:
        type: array
        items:
          type: integer
          format: int64
    required:
    - transportRequests
    example:
      namedUser: d012345
      transportRequests:
      - 155
      - 166
  TransportRequestsBodyEntityImpAll2:
    properties:
      namedUser:
        type: string
        maxLength: 60
    example:
      namedUser: d012345
  ImportResponse2:
    type: object
    properties:
      actionId:
        type: integer
        format: int64
      monitoringURL:
        type: string
    example:
      actionId: 171
      monitoringURL: /v2/actions/171
  ActionStatus:
    description: |
      Action status
        * `succeeded`
        * `warning`
        * `error`
        * `fatal`
        * `running`
        * `initial`
        * `unknown`
    enum:
    - succeeded
    - warning
    - error
    - fatal
    - running
    - initial
    - unknown
  TRStatus:
    description: |
      Transport request status
        * `succeeded`
        * `warning`
        * `error`
        * `fatal`
        * `running`
        * `repeat`
        * `initial`
        * `deleted`
        * `unknown`
    enum:
    - succeeded
    - warning
    - error
    - fatal
    - running
    - repeat
    - initial
    - deleted
    - unknown
  ActionResponse2:
    properties:
      id:
        type: integer
        format: int64
      type:
        $ref: '#/definitions/TransportActionType'
      status:
        $ref: '#/definitions/ActionStatus'
      startedAt:
        type: string
        format: date-time
      endedAt:
        type: string
        format: date-time
      triggeredBy:
        type: string
      triggeredByNamedUser:
        type: string
      nodeName:
        type: string
      transportRequests:
        type: array
        items:
          $ref: '#/definitions/ActionTRStatusResponse2'
    example:
      id: 43
      type: I
      status: succeeded
      startedAt: 2019-05-07T06:40:48.0725+0000
      endedAt: 2019-05-07T06:40:54.0971+0000
      triggeredBy: d7ad0010-09a7-4916-be8d-1166c653e0c7
      triggeredByNamedUser: d012345
      nodeName: SRC_NODE_350
      transportRequests:
      - id: 30
        status: succeeded
        entities:
        - id: 32
          fileName: file1.zip
          uri: '15'
          status: succeeded
        - id: 31
          fileName: file2.zip
          uri: '10'
          status: succeeded
      - id: 37
        status: succeeded
        entities:
        - id: 38
          fileName: file3.zip
          uri: '20'
          status: succeeded
        - id: 39
          fileName: file4.zip
          uri: '25'
          status: succeeded
  LogsResponse2:
    properties:
      logs:
        type: array
        items:
          $ref: '#/definitions/LogResponse2'
    example:
      logs:
      - transportRequestId: 30
        status: succeeded
        messages:
        - id: 82
          messageId: TRANSPORTREQUEST_END
          severity: I
          message: 'Import ended for transport request ''TR3501'' (id: 30) with status ''Success'', at May-07-2019 06:40:54 GMT'
          createdAt: 2019-05-07T06:40:54.0958+0000
        - id: 46
          messageId: TRANSPORTREQUEST_START
          severity: I
          message: 'Import (selected) started for transport request ''TR3501'' (id: 30), at May-07-2019 06:40:48 GMT'
          createdAt: 2019-05-07T06:40:48.0752+0000
        entities:
        - id: 32
          uri: '15'
          fileName: file1.zip
          status: succeeded
          messages:
          - id: 77
            messageId: ' '
            severity: I
            message: Deploy of content reference 982f7a9a-e9d3-411a-888d-da347c8f02f1 finished successfully
            createdAt: 2019-05-07T06:40:53.0371+0000
          - id: 74
            messageId: ' '
            severity: I
            message: Deploy of content reference 63103e7f-11de-4b39-bdd2-e429f3f24549 finished successfully
            createdAt: 2019-05-07T06:40:53.0370+0000
        - id: 31
          uri: '10'
          fileName: file2.zip
          status: succeeded
          messages:
          - id: 77
            messageId: ' '
            severity: I
            message: Deploy of content reference 982f7a9a-e9d3-411a-888d-da347c8f02f1 finished successfully
            createdAt: 2019-05-07T06:40:53.0371+0000
          - id: 74
            messageId: ' '
            severity: I
            message: Deploy of content reference 63103e7f-11de-4b39-bdd2-e429f3f24549 finished successfully
            createdAt: 2019-05-07T06:40:53.0370+0000
      - transportRequestId: 37
        status: succeeded
        messages:
        - id: 81
          messageId: TRANSPORTREQUEST_END
          severity: I
          message: 'Import ended for transport request ''TR3502'' (id: 37) with status ''Success'', at May-07-2019 06:40:54 GMT'
          createdAt: 2019-05-07T06:40:54.0954+0000
        - id: 47
          messageId: TRANSPORTREQUEST_START
          severity: I
          message: 'Import (selected) started for transport request ''TR3502'' (id: 37), at May-07-2019 06:40:48 GMT'
          createdAt: 2019-05-07T06:40:48.0758+0000
        entities:
        - id: 38
          uri: '20'
          fileName: file3.zip
          status: succeeded
          messages:
          - id: 80
            messageId: ' '
            severity: I
            message: Deploy of content reference c952da44-3f83-49a3-8e0d-ff9fff0a110b finished successfully
            createdAt: 2019-05-07T06:40:53.0372+0000
          - id: 71
            messageId: ' '
            severity: I
            message: Deploy of content reference 9ea0e65e-2e51-4e54-aa45-e87444467fdc finished successfully
            createdAt: 2019-05-07T06:40:53.0370+0000
        - id: 39
          uri: '25'
          fileName: file4.zip
          status: succeeded
          messages:
          - id: 80
            messageId: ' '
            severity: I
            message: Deploy of content reference c952da44-3f83-49a3-8e0d-ff9fff0a110b finished successfully
            createdAt: 2019-05-07T06:40:53.0372+0000
          - id: 71
            messageId: ' '
            severity: I
            message: Deploy of content reference 9ea0e65e-2e51-4e54-aa45-e87444467fdc finished successfully
            createdAt: 2019-05-07T06:40:53.0370+0000
  TrLogsResponse2:
    type: object
    properties:
      logs:
        type: array
        items:
          $ref: '#/definitions/TrLogResponse2'
    example:
      logs:
      - actionId: 28
        actionType: I
        status: succeeded
        actionStartedAt: '2019-07-22T12:30:10.175Z'
        actionTriggeredBy: d7ad0010-09a7-4916-be8d-1166c653e0c7
        actionTriggeredByNamedUser: d012345
        messages:
        - id: 54
          messageId: TRANSPORTREQUEST_END
          severity: I
          message: 'Import ended for transport request ''TR3401'' (id: 13) with status ''Success'', at Jul-22-2019 12:30:16 GMT'
          createdAt: '2019-07-22T12:30:16.400Z'
        - id: 41
          messageId: DEPLOYMENT_STARTED
          severity: I
          message: 'Deployment started. Process ID: dc93855f-53dd-4df5-8083-4c43db6a98e4'
          createdAt: '2019-07-22T12:30:10.760Z'
        entities:
        - id: 14
          uri: '9'
          status: succeeded
          fileName: small_com.sap.sl.ts.demo.ypa.mtar
          messages:
          - id: 52
            messageId: ' '
            severity: I
            message: Deploy of content reference 3277104e-70c4-4742-80b1-209f1d553f18 finished successfully
            createdAt: '2019-07-22T12:30:14.748Z'
          - id: 51
            messageId: ' '
            severity: I
            message: Deploy of file aca6420c-1aaf-4c94-a543-64ca3bbe8576 finished successfully
            createdAt: '2019-07-22T12:30:14.748Z'
  TrLogResponse2:
    type: object
    properties:
      actionId:
        type: integer
        format: int64
      actionStartedAt:
        type: string
        format: date-time
      actionTriggeredBy:
        type: string
      actionTriggeredByNamedUser:
        type: string
      actionType:
        $ref: '#/definitions/TransportActionType'
      entities:
        type: array
        items:
          $ref: '#/definitions/LogEntityResponse2'
      messages:
        type: array
        items:
          $ref: '#/definitions/LogMessageResponse2'
      status:
        $ref: '#/definitions/ActionStatus'
  ActionTRStatusResponse2:
    properties:
      id:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/ActionStatus'
      entities:
        type: array
        items:
          $ref: '#/definitions/ActionTREntityStatusResponse2'
  ActionTREntityStatusResponse2:
    properties:
      id:
        type: integer
        format: int64
      uri:
        type: string
      fileName:
        type: string
      status:
        $ref: '#/definitions/ActionStatus'
  LogResponse2:
    properties:
      transportRequestId:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/ActionStatus'
      messages:
        type: array
        items:
          $ref: '#/definitions/LogMessageResponse2'
      entities:
        type: array
        items:
          $ref: '#/definitions/LogEntityResponse2'
  LogMessageResponse2:
    properties:
      id:
        type: integer
        format: int64
      messageId:
        type: string
      severity:
        $ref: '#/definitions/LogSeverity'
      message:
        type: string
      createdAt:
        type: string
        format: date-time
  LogEntityResponse2:
    properties:
      id:
        type: integer
        format: int64
      uri:
        type: string
      fileName:
        type: string
      status:
        $ref: '#/definitions/ActionStatus'
      messages:
        type: array
        items:
          $ref: '#/definitions/LogMessageResponse2'
  TransportActionType:
    description: |
      Action type:
        * `FU` - File upload
        * `NE` - Node export
        * `NU` - Node upload
        * `I` - Import
        * `DQ` - Delete queue entry
        * `RQ` - Reset queue entry
        * `CQ` - Cleanup queue entry
        * `FQ` - Forward queue entry
        * `AQ` - Add queue entry
    enum:
    - FU
    - NE
    - NU
    - I
    - DQ
    - RQ
    - CQ
    - FQ
    - AQ
  LogSeverity:
    description: |
      Log message severity:
        * `F` - Fatal
        * `E` - Error
        * `W` - Warning
        * `I` - Info
    enum:
    - F
    - E
    - W
    - I
tags:
- description: Operations with files
  name: Files
- description: Content export operations
  name: Export & Upload
- name: Import
  description: Import, forward and reset transport requests
- name: Logging & Monitoring
  description: Logging and monitoring of transport requests
